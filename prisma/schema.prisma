// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // schemas  = ["base", "divisiion", "user", "post", "token"]
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")

// }

model Division {
  id          String  @id @default(uuid())
  name        String
  description String?
  user        User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@schema("divisiion")
  @@map("divisions")
}

model Role {
  id   String @id @default(uuid())
  name String @unique
  user User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@schema("roles")
  @@map("roles")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String?   @default("user")
  isActivated    Boolean?  @default(false) @map("is_activated")
  activationLink String?   @map("activation_link")
  division       Division? @relation(fields: [divisionId], references: [id])
  divisionId     String?   @map("division_id")
  roles          Role[]
  posts          Post[]
  tokens         Token[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@schema("user")
  @@map("users")
}

model Post {
  id        String  @id @default(uuid())
  title     String
  content   String?
  published Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@schema("post")
  @@map("posts")
}

model Token {
  id           String @id @default(uuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique @map("user_id")
  refreshToken String @unique @map("refresh_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@schema("token")
  @@map("tokens")
}
